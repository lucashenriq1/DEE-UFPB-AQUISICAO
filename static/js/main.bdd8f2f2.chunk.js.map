{"version":3,"sources":["ChartViewer.js","App.js","reportWebVitals.js","index.js"],"names":["ApexChart","props","series","name","data","id","options","chart","height","type","zoom","enabled","dataLabels","stroke","width","curve","colors","fill","gradient","shadeIntensity","inverseColors","gradientToColors","opacityFrom","opacityTo","stops","App","value","label","useState","selectedOption","setSelectedOption","dataSetOne","updateDataSetOne","dataSetTwo","updateDataSetTwo","batteryLevel","updatebatteryLevel","topicGeral","updateTopic","incomingMessage","setIncomingMessage","messageColor","batteryColor","Date","React","useEffect","interval","setInterval","client","connect","on","console","log","subscribe","qos","topic2","message","mensagem","JSON","parse","toString","parseFloat","Bateria","val1","Math","floor","Temperatura","prevData","length","shift","val2","Umidade","clearInterval","className","style","backgroundColor","htmlFor","onChange","previa","defaultValue","onClick","clear","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.bdd8f2f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nexport default function ApexChart(props) {\r\n  const series = [\r\n    {\r\n      name: \"xx\",\r\n      data: props.data\r\n    }\r\n  ];\r\n  const options = {\r\n    chart: {\r\n      height: 350,\r\n      type: \"line\",\r\n      zoom: {\r\n        enabled: true\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    stroke: {\r\n      width: 2,\r\n      curve: \"smooth\"\r\n    },\r\n    colors: [\"#210124\"],\r\n    fill: {\r\n      type: \"gradient\",\r\n      gradient: {\r\n        shadeIntensity: 1,\r\n        inverseColors: true,\r\n        gradientToColors: [\"#DB162F\"],\r\n        opacityFrom: 1,\r\n        opacityTo: 1,\r\n        type: \"vertical\",\r\n        stops: [0, 30]\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"chart\">\r\n      <Chart options={options} series={series} type=\"line\" height={350} />\r\n    </div>\r\n  );\r\n}\r\n","// import { Client } from 'paho-mqtt';\nimport { connect, MqttClient } from 'mqtt'\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport ChartViewer from \"./ChartViewer\";\n\n\n\nfunction App() {\n  \n  \n  const options = [\n    { value: 'aq1', label: 'Tiva 1' },\n    { value: 'aq2', label: 'Tiva 2' },\n    { value: 'aq3', label: 'Tiva 3' },\n    { value: 'aq4', label: 'Tiva 4' },\n    { value: 'aq5', label: 'Tiva 5' }\n  ];\n  const [selectedOption, setSelectedOption] = useState(null);\n\n\n  \n \n  // const client = connect('wss://broker.emqx.io:8084/mqtt');\n  // client.end();\n\n\n  function Disconnect() {\n    // client.end();\n    updateDataSetOne([0, 0, 0, 0, 0, 0]);\n    updateDataSetTwo([0, 0, 0, 0, 0, 0]);\n    setIncomingMessage(null);\n    console.clear();\n  }\n\n\n  const [dataSetOne, updateDataSetOne] = useState([0, 0, 0, 0, 0, 0]);\n  const [dataSetTwo, updateDataSetTwo] = useState([0, 0, 0, 0, 0, 0]);\n  const [batteryLevel, updatebatteryLevel] = useState(95);\n  const [temperatura, updatetemperatura] =useState([0, 0, 0, 0, 0, 0]);\n  const [umidade, updateumidade] = useState([0, 0, 0, 0, 0, 0]);\n  const [topicGeral, updateTopic] = useState('mqtt/ufpb-aq1/temp');\n\n  const [incomingMessage, setIncomingMessage] = useState(null);\n  const messageColor = incomingMessage != null ? 'green' : 'red';\n  const batteryColor = batteryLevel <= 90 ? 'red' : 'green';\n  const currentDate = new Date();\n// aaaaaaaaaaaaa\n  \n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n    const previa='mqtt/ufpb-'+selectedOption.value+'/temp';\n    console.log(\"=---------------\");\n    console.log(topicGeral);\n    updateTopic(previa);\n    console.log(topicGeral);\n    console.log(\"=---------------\");\n\n  }\n\n  // console.clear();\n  // add side effect to component\n  React.useEffect(() => {\n    // create interval\n    const interval = setInterval(\n      // set number every 5s\n      () => {\n       \n        const client = connect('wss://broker.emqx.io:8084/mqtt');\n        client.on('connect', () => {\n          console.log('Connected to MQTT broker ' + topicGeral);\n          client.subscribe(topicGeral, { qos: 1 });\n        });\n        // '{\"Bateria\":90, \"Temperatura\":42, \"Umidade\":60}'\n        client.on('message', (topic2, message) => {\n          const mensagem = JSON.parse(message.toString());\n          \n          setIncomingMessage(message.toString());\n          updatebatteryLevel(parseFloat(mensagem.Bateria));\n          // const val1 = Math.floor(mensagem.Temperatura * (50 - 0 + 1)) + 0;\n          const val1 = Math.floor(mensagem.Temperatura);\n          updateDataSetOne(prevData => {\n            if(prevData.length >= 20) prevData.shift();\n            // console.log(prevData);\n            return ([...prevData, val1]);\n          });\n  \n          // const val2 = Math.floor(mensagem.Umidade * (90 - 20 + 1)) + 20;\n          const val2 = Math.floor(mensagem.Umidade );\n          updateDataSetTwo(prevData => {\n            if(prevData.length >= 20) prevData.shift();\n            // console.log(prevData);\n            return ([...prevData, val2]);\n          });\n          // client.end();\n        });\n        \n      },\n      500\n    );\n    // clean up interval on unmount\n    return () => {\n      clearInterval(interval);\n    };\n\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>UFPB</h1>\n      </header>\n      <div className='main'>\n        <div className='menus'>\n          <div className='MensagemRecebida' style={{ backgroundColor: messageColor }}>\n              <h3>Mensagem</h3>\n          </div>\n          \n          <div className='node-wrapper'>\n            <label htmlFor='nodes'>Node:</label>\n            {/* <Select options={options} defaultValue={options[0]} id=\"nodes\"></Select> */}\n            <Select options={options} onChange={handleChange} defaultValue={options[0]}/>\n            {selectedOption && <p>Topic: {'mqtt/ufpb-'+selectedOption.value+'/temp'}</p>}\n            <p>QoS1</p>\n            <p>JSON example: '&#123;\"Bateria\":90, \"Temperatura\":42, \"Umidade\":60&#125;'</p>\n          </div>\n          <div className='battery' style={{ backgroundColor: batteryColor }}>\n            <h3>Battery: {batteryLevel}%</h3>\n          </div>\n            <div>\n              <button onClick={Disconnect}>Limpar</button>\n            </div>\n            \n          \n        </div>\n        <div className='data'>\n          <h2> &nbsp;  &nbsp;  {topicGeral.toString()} </h2>\n          <h3>      &nbsp;&nbsp;&nbsp;QoS1</h3>\n          <h3>   &nbsp; Temperatura (Â°C)</h3>\n          <ChartViewer data={dataSetOne} title=\"Temperatura\" />\n          <h3>  &nbsp; Umidade (%)</h3>\n          <ChartViewer data={dataSetTwo} title=\"Humidade\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}